"""Module for pipelines."""
import sys
import os
from p_kit.core import PCircuit
from p_kit.solver.csd_solver import CaSuDaSolver
from p_kit.visualization import histplot, vin_vout,plot3d
import numpy as np
import matplotlib.pyplot as plt

c = PCircuit(5)

#FA using Hamiltonian with reduced XOR gate
#c.J = np.array([[0,-1,2,-2,0,0,0,0,0,2,0,0],[-1,0,2,2,-2,0,0,0,0,2,0,0],[2,2,0,1,2,0,0,0,0,0,0,0],[-2,2,1,0,2,0,0,0,0,0,0,0],[0,-2,2,2,0,-1,2,-2,0,0,2,0],[0,0,0,0,-1,0,2,2,-2,0,2,0],[0,0,0,0,2,2,0,1,2,0,0,0],[0,0,0,0,-2,2,1,0,2,0,0,0],[0,0,0,0,0,-2,2,2,0,0,0,0],[2,2,0,0,0,0,0,0,0,0,-1,2],[0,0,0,0,2,2,0,0,0,-1,0,2],[0,0,0,0,0,0,0,0,0,2,2,0]])
#c.h = np.array([-1,1,3,-3,-1,1,3,-3,0,-3,-3,2])



#FA using Hamiltonian with Cost Function of XOR gate
#c.J = np.array([[0,-3,2,2,0,0,0,0,0,0,0,2,0,0],[-3,0,2,2,0,0,0,0,0,0,0,2,0,0],[2,2,0,0,-1,2,0,0,0,0,0,0,0,0],[2,2,0,0,-1,0,0,0,0,0,0,0,0,0],[0,0,-1,-1,0,2,0,0,0,0,0,0,0,0],[0,0,2,0,2,0,-3,2,2,0,0,0,2,0],[0,0,0,0,0,-3,0,2,2,0,0,0,2,0],[0,0,0,0,0,2,2,0,0,-1,2,0,0,0],[0,0,0,0,0,2,2,0,0,-1,0,0,0,0],[0,0,0,0,0,0,0,-1,-1,0,2,0,0,0],[0,0,0,0,0,0,0,2,0,2,0,0,0,0],[2,2,0,0,0,0,0,0,0,0,0,0,-1,2],[0,0,0,0,0,2,2,0,0,0,0,-1,0,2],[0,0,0,0,0,0,0,0,0,0,0,2,2,0]])
#c.h = np.array([1,1,3,-2,1,-1,1,3,-2,1,-2,-3,-3,2])


#FA using Multiplexer and inverter
#c.J = np.array([[0,0,-1,-1,0,2,0,0,0,0,0,0,0,-1,2,0,0],[0,0,-1,-1,2,0,0,0,0,0,0,0,0,0,0,0,0],[-1,-1,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0],[-1,-1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0],[0,2,2,0,0,-1,2,0,0,0,0,0,0,0,0,0,0],[2,0,0,2,-1,0,2,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,2,2,0,-1,-1,-1,0,2,0,-1,0,2,0],[0,0,0,0,0,0,-1,0,-1,-1,2,0,0,0,0,2,0],[0,0,0,0,0,0,-1,-1,0,0,2,0,0,0,0,0,0],[0,0,0,0,0,0,-1,-1,0,0,0,2,0,0,0,0,0],[0,0,0,0,0,0,0,2,2,0,0,-1,2,0,0,0,0],[0,0,0,0,0,0,2,0,0,2,-1,0,2,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0],[-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,2,0,0],[2,0,0,0,0,0,0,0,0,0,0,0,0,2,0,-1,2],[0,0,0,0,0,0,2,2,0,0,0,0,0,0,-1,0,2],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0]])
#c.h = np.array([2,1,1,1,-3,-3,4,2,1,1,-3,-3,2,1,-3,-3,2])



#FA using LP (Pulp)
#c.J = np.array([[0,-1,-1,1,2],[-1,0,-1,1,2],[-1,-1,0,1,2],[1,1,1,0,-2],[2,2,2,-2,0]])
#c.h = np.array([0,0,0,0,0])



#FA REDUCED
'''
c.J = np.array([[0,-2,0,2,2,0],
                [-2,0,0,2,2,0],
                [0,0,0,3,-3,2],
                [2,2,3,0,1,-2],
                [2,2,-3,1,0,2],
                [0,0,2,-2,2,0]])
'''

c.J = np.array([[0,-2,2,2,0],
                [-2,0,2,2,0],
                [2,2,0,1,-2],
                [2,2,1,0,2],
                [0,0,-2,2,0]])


c.h = np.array([0,0,0,0,0])



"""
#4-Bit Adder using FA
c.J = np.array([[0,-2,-1,2,0,-1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [-2,0,-1,2,0,-1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [-1,-1,0,2,-1,-1,-1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [2,2,2,0,-1,0,0,0,-1,-1,2,-1,-1,-1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,-1,-1,0,0,-1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [-1,-1,-1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [2,2,-1,0,-1,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,2,0,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],

                [0,0,0,-1,0,0,0,0,0,-2,2,0,-1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,-1,0,0,0,0,-2,0,2,0,-1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,2,0,0,0,0,2,2,0,-1,0,0,0,-1,-1,2,-1,-1,-1,2,0,0,0,0,0,0,0],
                [0,0,0,-1,0,0,0,0,0,0,-1,0,0,-1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,-1,0,0,0,0,-1,-1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,-1,0,0,0,0,2,2,0,-1,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                [0,0,0,2,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],

                [0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,-2,2,0,-1,2,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,-2,0,2,0,-1,2,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,2,2,0,-1,0,0,0,-1,-1,2,-1,-1,-1,2],
                [0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,-1,2,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,-1,-1,0,0,0,2,0,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,2,2,0,-1,2,0,2,0,0,0,0,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0],
                
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,-2,2,0,-1,2,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,-2,0,2,0,-1,2,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,2,2,0,-1,0,0,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,-1,0,0,-1,2],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,-1,-1,0,0,0,2,0],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,2,2,0,-1,2,0,2],
                [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,2,0]])



c.h = np.array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])
"""



solver = CaSuDaSolver(Nt=25000, dt=0.1667, i0=0.5)

input, output = solver.solve(c)


#3d Histogram plot for the p-bit
#plot3d(output, A=[0,1,7], B=[11,14])


histplot(output)


#current_dir = os.getcwd()
#print("Current Directory:", current_dir)
#
## Output array to a file in the current directory
#file_path = os.path.join(current_dir, 'output_HA_majority_red.txt')
#
#with open(file_path, 'w') as f:
#    for element in output:
#        f.write(str(element) + '\n')
#
#print(f"Array data saved to {file_path}")


#np.set_printoptions(threshold=sys.maxsize)
#print(output)


#vin_vout(input, output, p_bit=2)